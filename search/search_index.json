{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#descricao","title":"Descri\u00e7\u00e3o","text":"<p>O Excel Structure Validator \u00e9 um projeto Python destinado a validar a estrutura de arquivos Excel. Ele compara arquivos Excel recebidos com um modelo pr\u00e9-definido para assegurar que os dados cumpram com os padr\u00f5es estabelecidos. </p>"},{"location":"#fluxo","title":"Fluxo","text":"<pre><code>flowchart LR \n    A[Folder: Input] &lt;--&gt;|Compara Schema| B(Folder: Modelo)\n    B --&gt; C{Validator}\n    C --&gt;|Arquivo correto| D[Folder: Output Correto] \n    C --&gt;|Log com detalhes| D[Folder: Output Correto] \n    C --&gt;|Arquivo incorreto| E[Folder: Output Incorreto]\n    C --&gt;|Log com detalhes| E[Folder: Output Incorreto] </code></pre>"},{"location":"#aplicacao","title":"Aplica\u00e7\u00e3o","text":"<p>O projeto \u00e9 ideal para cen\u00e1rios onde a qualidade e a consist\u00eancia dos dados s\u00e3o cr\u00edticas para an\u00e1lises subsequentes, como importa\u00e7\u00f5es para o Power BI, an\u00e1lises de dados, entre outros.</p> <p>Antes de iniciar avalie os arquivos em excel dentro da pasta data/input e data/modelo para entender o comportamento do projeto. Para facilitar, criei arquivos simples com 4 at\u00e9 6 colunas e poucas linhas, por\u00e9m o conceito se aplica a qualquer modelo e/ou quantidade de colunas/linhas.</p>"},{"location":"#tabela-modelo","title":"Tabela modelo","text":"<p>\u00c9 uma tabela simples, 5 colunas e todas com o dataType do tipo inteiro.</p> Coluna A Coluna B Coluna C Coluna D Coluna E int int int int int"},{"location":"#validacoes","title":"Valida\u00e7\u00f5es","text":"<p>S\u00e3o 6 valida\u00e7\u00f5es que o nosso projeto est\u00e1 configurado</p> <p>Verifica se as colunas do modelo est\u00e3o na mesma ordem em rela\u00e7\u00e3o ao arquivo recebido.</p> Source code in <code>app/validacoes/colunas_estao_presentes_na_mesma_ordem.py</code> <pre><code>def validar_se_todas_as_colunas_estao_presentes_na_mesma_ordem(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se as colunas do modelo est\u00e3o na mesma ordem em rela\u00e7\u00e3o ao arquivo recebido.\n    \"\"\"\n    if excel_modelo.columns.equals(arquivo.columns):\n        return True, 'As colunas est\u00e3o na mesma ordem.'\n    else:\n        return False, 'As colunas n\u00e3o est\u00e3o na mesma ordem.'\n</code></pre> <p>Verifica se todas as colunas do modelo est\u00e3o presentes no arquivo recebido.</p> Source code in <code>app/validacoes/colunas_estao_presentes.py</code> <pre><code>def validar_se_todas_as_colunas_estao_presentes(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se todas as colunas do modelo est\u00e3o presentes no arquivo recebido.\n    \"\"\"\n    if set(excel_modelo.columns) == set(arquivo.columns):\n        return True, 'Todas as colunas est\u00e3o presentes.'\n    else:\n        return False, 'Algumas colunas n\u00e3o est\u00e3o presentes.'\n</code></pre> <p>Verifica se o arquivo recebido tem colunas a mais em rela\u00e7\u00e3o ao modelo.</p> Source code in <code>app/validacoes/existem_colunas_a_mais.py</code> <pre><code>def validar_se_existem_colunas_a_mais(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se o arquivo recebido tem colunas a mais em rela\u00e7\u00e3o ao modelo.\n    \"\"\"\n    colunas_a_mais = set(arquivo.columns) - set(excel_modelo.columns)\n    return len(colunas_a_mais) == 0, list(colunas_a_mais)\n</code></pre> <p>Verifica se o arquivo recebido tem colunas a menos em rela\u00e7\u00e3o ao modelo.</p> Source code in <code>app/validacoes/existem_colunas_a_menos.py</code> <pre><code>def validar_se_existem_colunas_a_menos(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se o arquivo recebido tem colunas a menos em rela\u00e7\u00e3o ao modelo.\n    \"\"\"\n    colunas_a_mais = set(excel_modelo.columns) - set(arquivo.columns)\n    return len(colunas_a_mais) == 0, list(colunas_a_mais)\n</code></pre> <p>Verifica se o arquivo recebido tem o mesmo n\u00famero de linhas em rela\u00e7\u00e3o ao modelo.</p> Source code in <code>app/validacoes/quantidade_de_linhas.py</code> <pre><code>def validar_quantidade_de_linhas(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se o arquivo recebido tem o mesmo n\u00famero de linhas em rela\u00e7\u00e3o ao modelo.\n    \"\"\"\n    num_linhas_df1 = len(excel_modelo)\n    num_linhas_df2 = len(arquivo)\n    return num_linhas_df1 == num_linhas_df2, num_linhas_df2 - num_linhas_df1\n</code></pre> <p>Verifica se o arquivo recebido tem os mesmos datatype em rela\u00e7\u00e3o ao modelo.</p> Source code in <code>app/validacoes/tipos_dados.py</code> <pre><code>def validar_tipos_dados(\n    excel_modelo: DataFrame, arquivo: DataFrame\n) -&gt; Tuple[bool, str]:\n\"\"\"\n    Verifica se o arquivo recebido tem os mesmos datatype em rela\u00e7\u00e3o ao modelo.\n    \"\"\"\n    colunas_comuns = set(excel_modelo.columns).intersection(\n        set(arquivo.columns)\n    )\n    colunas_com_tipos_diferentes = [\n        col\n        for col in colunas_comuns\n        if excel_modelo[col].dtype != arquivo[col].dtype\n    ]\n    return len(colunas_com_tipos_diferentes) == 0, colunas_com_tipos_diferentes\n</code></pre> <p>Caso qualquer valida\u00e7\u00e3o seja identificada como invalido, ele marca o arquivo como invalido.</p>"}]}